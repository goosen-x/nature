'use client'

import { useProducts } from '@/hooks/useProducts'
import { useState, useEffect, Suspense } from 'react'
import { ProductWithRelations } from '@/lib/supabase'
import EditProductModal from '@/components/modals/EditProductModal'
import TestPageLoginForm from '@/components/forms/TestPageLoginForm'
import { useSearchParams } from 'next/navigation'

export default function TestDBPage() {
	return (
		<Suspense fallback={<div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>}>
			<TestDBPageContent />
		</Suspense>
	)
}

function TestDBPageContent() {
	const searchParams = useSearchParams()
	const secret = searchParams.get('secret')

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
	const isValidSecret = secret === process.env.NEXT_PUBLIC_TEST_PAGE_SECRET

	// –ï—Å–ª–∏ —Å–µ–∫—Ä–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
	if (!isValidSecret) {
		return <TestPageLoginForm />
	}

	return <ProtectedTestDBContent />
}

function ProtectedTestDBContent() {
	const [page, setPage] = useState(1)
	const [search, setSearch] = useState('')
	const [category, setCategory] = useState('')
	const [categories, setCategories] = useState<any[]>([])
	const [editingProduct, setEditingProduct] =
		useState<ProductWithRelations | null>(null)
	const [isEditModalOpen, setIsEditModalOpen] = useState(false)

	const { products, pagination, loading, error } = useProducts({
		page,
		limit: 12,
		search: search || undefined,
		category: category || undefined
	})

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	useEffect(() => {
		const fetchCategories = async () => {
			try {
				const response = await fetch('/api/categories')
				if (response.ok) {
					const data = await response.json()
					setCategories(data)
				}
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error)
			}
		}
		fetchCategories()
	}, [])

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ
	const handleProductUpdate = (updatedProduct: ProductWithRelations) => {
		// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–∫–µ
		const updatedProducts = products.map(product =>
			product.id === updatedProduct.id ? updatedProduct : product
		)

		// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Ö—É–∫
		// –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å React Query –∏–ª–∏ SWR
		window.location.reload()
	}

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	const handleEditProduct = (product: ProductWithRelations) => {
		setEditingProduct(product)
		setIsEditModalOpen(true)
	}

	if (loading) {
		return (
			<div className='container mx-auto p-4'>
				<h1 className='mb-4 text-2xl font-bold'>–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</h1>
				<div className='flex items-center justify-center py-8'>
					<div className='text-center'>
						<div className='mb-4 text-2xl'>üîÑ</div>
						<div>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>
					</div>
				</div>

				{/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
				<EditProductModal
					product={editingProduct}
					isOpen={isEditModalOpen}
					onClose={() => {
						setIsEditModalOpen(false)
						setEditingProduct(null)
					}}
					onSave={handleProductUpdate}
				/>
			</div>
		)
	}

	if (error) {
		return (
			<div className='container mx-auto p-4'>
				<h1 className='mb-4 text-2xl font-bold'>–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</h1>
				<div className='rounded-lg bg-red-50 p-4 text-red-600'>
					<strong>–û—à–∏–±–∫–∞:</strong> {error}
				</div>
			</div>
		)
	}

	return (
		<div className='container mx-auto p-4'>
			<h1 className='mb-6 text-3xl font-bold'>üéØ –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase</h1>

			{/* –§–∏–ª—å—Ç—Ä—ã */}
			<div className='mb-6 rounded-lg bg-gray-50 p-4'>
				<div className='grid gap-4 md:grid-cols-2'>
					<div>
						<label className='mb-2 block text-sm font-medium'>
							üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤:
						</label>
						<input
							type='text'
							value={search}
							onChange={e => setSearch(e.target.value)}
							className='w-full rounded-lg border border-gray-300 p-2 focus:border-blue-500 focus:outline-none'
							placeholder='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞...'
						/>
					</div>

					<div>
						<label className='mb-2 block text-sm font-medium'>
							üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:
						</label>
						<select
							value={category}
							onChange={e => setCategory(e.target.value)}
							className='w-full rounded-lg border border-gray-300 p-2 focus:border-blue-500 focus:outline-none'
						>
							<option value=''>–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
							{categories.map(cat => (
								<option key={cat.id} value={cat.id}>
									{cat.name}
								</option>
							))}
						</select>
					</div>
				</div>
			</div>

			{/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
			<div className='mb-6 rounded-lg bg-blue-50 p-4'>
				<div className='grid gap-2 text-sm md:grid-cols-3'>
					<div>
						<strong>üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:</strong> {pagination?.total || 0}
					</div>
					<div>
						<strong>üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞:</strong> {pagination?.page || 1} –∏–∑{' '}
						{pagination?.totalPages || 1}
					</div>
					<div>
						<strong>üéØ –ü–æ–∫–∞–∑–∞–Ω–æ:</strong> {products.length} —Ç–æ–≤–∞—Ä–æ–≤
					</div>
				</div>
			</div>

			{/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
			<div className='grid gap-4 md:grid-cols-2 lg:grid-cols-3'>
				{products.map(product => (
					<div
						key={product.id}
						className='rounded-lg border border-gray-200 p-4 shadow-sm hover:shadow-md'
					>
						<div className='mb-2 flex items-center justify-between'>
							<h3 className='font-semibold text-gray-900'>{product.title}</h3>
							<div className='flex items-center space-x-2'>
								<span
									className={`rounded-full px-2 py-1 text-xs ${
										product.available
											? 'bg-green-100 text-green-800'
											: 'bg-red-100 text-red-800'
									}`}
								>
									{product.available ? '‚úÖ –í –Ω–∞–ª–∏—á–∏–∏' : '‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}
								</span>
								<button
									onClick={() => handleEditProduct(product)}
									className='rounded-lg bg-blue-500 px-2 py-1 text-xs text-white transition-colors hover:bg-blue-600'
									title='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä'
								>
									‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
								</button>
							</div>
						</div>

						<p className='mb-2 text-sm text-gray-600'>{product.fullname}</p>

						<div className='mb-2 text-lg font-bold text-green-600'>
							{product.price.toLocaleString()} ‚ÇΩ
						</div>

						<div className='space-y-1 text-xs text-gray-500'>
							<div>üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category?.name}</div>
							<div>üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {product.company?.name}</div>
						</div>
					</div>
				))}
			</div>

			{/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
			{pagination && pagination.totalPages > 1 && (
				<div className='mt-8 flex justify-center space-x-2'>
					<button
						onClick={() => setPage(Math.max(1, page - 1))}
						disabled={page === 1}
						className='rounded-lg border border-gray-300 px-4 py-2 hover:bg-gray-50 disabled:opacity-50'
					>
						‚Üê –ù–∞–∑–∞–¥
					</button>

					<span className='flex items-center px-4 py-2'>
						–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {pagination.totalPages}
					</span>

					<button
						onClick={() => setPage(Math.min(pagination.totalPages, page + 1))}
						disabled={page === pagination.totalPages}
						className='rounded-lg border border-gray-300 px-4 py-2 hover:bg-gray-50 disabled:opacity-50'
					>
						–í–ø–µ—Ä–µ–¥ ‚Üí
					</button>
				</div>
			)}

			{/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö */}
			<div className='mt-8 rounded-lg bg-green-50 p-4'>
				<h2 className='mb-2 text-lg font-semibold text-green-800'>
					‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!
				</h2>
				<div className='text-sm text-green-700'>
					<p>‚Ä¢ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ Supabase</p>
					<p>‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏</p>
					<p>‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞</p>
					<p>‚Ä¢ API endpoints –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</p>
				</div>
			</div>

			{/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
			<div className='mt-4 rounded-lg bg-blue-50 p-4'>
				<h2 className='mb-2 text-lg font-semibold text-blue-800'>
					‚úèÔ∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
				</h2>
				<div className='text-sm text-blue-700'>
					<p>‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚úèÔ∏è —Ä—è–¥–æ–º —Å —Ç–æ–≤–∞—Ä–æ–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
					<p>‚Ä¢ –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω—É –∏ –Ω–∞–ª–∏—á–∏–µ</p>
					<p>‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Supabase</p>
					<p>‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è</p>
				</div>
			</div>

			{/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
			<EditProductModal
				product={editingProduct}
				isOpen={isEditModalOpen}
				onClose={() => {
					setIsEditModalOpen(false)
					setEditingProduct(null)
				}}
				onSave={handleProductUpdate}
			/>
		</div>
	)
}
